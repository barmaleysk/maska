<?php

namespace Tbot;

use Longman\TelegramBot\Conversation;
use Longman\TelegramBot\DB;
use Longman\TelegramBot\Request;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Entities\Keyboard;
use Longman\TelegramBot\Entities\InlineQuery\InlineQueryResultArticle;
use Longman\TelegramBot\Entities\InputMessageContent\InputTextMessageContent;

use PDO;

class Tbot
{
	
	/**
	 * Telegram –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
	 * 
	 * @var \Longman\TelegramBot\Commands\Command
	 */
	public $command;
	
	/**
	 * ID —á–∞—Ç–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ (null –¥–ª—è Inline –∑–∞–ø—Ä–æ—Å–æ–≤)
	 * 
	 * @var int|null
	 */
	public $chat_id;
	
	/**
	 * ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞
	 * 
	 * @var int
	 */
	public $user_id;
	
	/**
	 * –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
	 * 
	 * @var bool
	 */
	public $isAdmin;	
	
	/**
	 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–æ—Ç–∞
	 * 
	 * @var array
	 */
	public $config;
	
	/**
	 * @param \Longman\TelegramBot\Commands\Command $command
	 * @param int $user_id
	 * @param int $chat_id
	 */
	public function __construct($command, $user_id, $chat_id = null){
		$this->command = $command;
		$this->user_id = $user_id;		
		$this->chat_id = $chat_id;
		
		$telegram = $command->getTelegram();
		$this->isAdmin = $telegram->isAdmin($user_id);
		$this->config = $telegram->getCommandConfig('dummyCommand');
	}
	
	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
	 * 
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function start(){		
		return $this->displayPage(['type' => 'start']);		
	}
	
	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ª–æ–≥–æ–≤
	 * 
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function genericMessage(){
		$message = $this->command->getMessage();
		if($message->getType() != 'text') return Request::emptyResponse();		
		$messageText = $message->getText();			
		
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Inline –∑–∞–ø—Ä–æ—Å–∞, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
		if($messageText == 'ü§î') return Request::emptyResponse();
		
		// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
		return $this->displayPage(['name' => $messageText]);
	}
	
	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π Inline –∫–Ω–æ–ø–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º callback_data 
	 * 
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function callbackQuery(){
        $callback_query    = $this->command->getCallbackQuery();
        $callback_query_id = $callback_query->getId();
        $callback_data     = $callback_query->getData();

        $data = ['callback_query_id' => $callback_query_id];
		
		$chat_id = $this->chat_id;
		$user_id = $this->user_id;
		$isAdmin = $this->isAdmin;
		
		if(preg_match("/^([a-zA-Z]*)([0-9]*)$/u", $callback_data, $match)){
			switch($match[1]){
				case 'orderCreate': // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
					$conv = new Conversation($user_id, $chat_id, 'orderCreateConv');
					$this->orderCreateConv($conv);
					break;
				case 'hide': // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –°–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä
					if($isAdmin && $match[2] && $this->showHidePage($match[2], 1)){						
						Request::sendMessage(['chat_id' => $chat_id, 'text' => '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞!']);
					}				
					break;
				case 'show': // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä
					if($isAdmin && $match[2] && $this->showHidePage($match[2], 0)){						
						Request::sendMessage(['chat_id' => $chat_id, 'text' => '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!']);
					}				
					break;
				case 'edit': // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
				    if($isAdmin && $match[2] && $page = DB::getPdo()->query("select * from my_page where id={$match[2]} and type='product'")->fetch(PDO::FETCH_ASSOC)){
				        $conv = new Conversation($user_id, $chat_id, 'editConv');
				        $conv->notes['id'] = $page['id'];
				        $this->sendConvStage($conv, 'edit_start', $page);
				        $conv->update();
				    }
				    break;
				case 'cartAdd': // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –í –∫–æ—Ä–∑–∏–Ω—É
					if($match[2]) $data += $this->cartAdd($match[2]);
					break;
				case 'cartIncrease': // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –î–æ–±–∞–≤–∏—Ç—å (–≤ –∫–æ—Ä–∑–∏–Ω–µ)
					if($match[2]) $data += $this->cartUpdate($match[2], 'increase', $user_id, $chat_id);
					break;
				case 'cartDecrease': // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –£–±—Ä–∞—Ç—å (–≤ –∫–æ—Ä–∑–∏–Ω–µ)
					if($match[2]) $data += $this->cartUpdate($match[2], 'decrease', $user_id, $chat_id);
					break;
				case '': // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ç–æ–≤–∞—Ä/—Ä–∞–∑–¥–µ–ª
					if($match[2]) $this->displayPage(['id' => $match[2]]);
					break;
			}
		}
		
		return Request::answerCallbackQuery($data);
	}	
	
	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∑–∞–ø—Ä–æ—Å–æ–≤
	 * 
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function inlineQuery(){
		$inline_query = $this->command->getInlineQuery();
        $query        = $inline_query->getQuery();
		$isAdmin = $this->isAdmin;
		$download_url = $this->config['base_url'].$this->config['download_path'];

        $data    = ['inline_query_id' => $inline_query->getId(), 'is_personal' => false, 'cache_time' => 30, 'results' => '[]'];
		
        // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
        if(mb_strlen($query, 'utf-8') < 3) return Request::answerInlineQuery($data);
		
        $results = [];
		
		if($page = $this->fetchPage(['name' => $query, 'type' => 'section'])){
		    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∞, –≤—ã–≤–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω–µ–≥–æ
			$telegram = $this->command->getTelegram();
			if($isAdmin){
			    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–∞–∑–¥–µ–ª
				$results[] = new InlineQueryResultArticle([
					'id' => 'a',
					'title' => '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
					'description'           => '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
					'thumb_url'				=> $download_url . 'add_grey_156x156.jpg',
					'thumb_width' 			=> 156,
					'thumb_height' 			=> 156,
					'input_message_content' => new InputTextMessageContent(['message_text' => '/addProduct '.$page['id']]),
				]);
				$data['is_personal'] = true;
				$data['cache_time'] = 5;
			}
			
			$products = $page['children'];
		}
		else{
		    // –ò–Ω–∞—á–µ –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
			$products = $this->searchPages(['name' => $query], ['type' => 'product']);
		}
		
		foreach($products as $child){				
			$results[] = new InlineQueryResultArticle([
				'id'                    => $child['id'],
				'title'                 => ($child['hidden'] ? 'üîí ' : '').$child['name'].', '.$child['price'].'‚ÇΩ',
				'description'           => $child['descr'],
				'thumb_url'				=> $download_url.$child['thumb'],
				'thumb_width' 			=> 156,
				'thumb_height' 			=> 156,
				'input_message_content' => new InputTextMessageContent(['message_text' => $child['name']]),
			]);
		}
		
		if(count($results)){
		    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞
			$results[] = new InlineQueryResultArticle([
				'id' => 'x',
				'title' => '–ó–∞–∫—Ä—ã—Ç—å',
				'description'           => '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫',
				'thumb_url'				=> $download_url.'close_grey_156x156.jpg',
				'thumb_width' 			=> 156,
				'thumb_height' 			=> 156,
				'input_message_content' => new InputTextMessageContent(['message_text' => 'ü§î']),
			]);				
		}		

        $data['results'] = '[' . implode(',', $results) . ']';		

        return Request::answerInlineQuery($data);		
	}
	
	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
	 * 
	 * @param array $product –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î
	 * @param boolean $lock –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	 * @return array –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	 */
	public function formatCartProduct($product, $lock = false){
		$data = [
			'text' => '*'.$product['name'].', '.$product['price']."‚ÇΩ*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ".$product['quanity'].' | –í—Å–µ–≥–æ: '.($product['price']*$product['quanity']).'‚ÇΩ',
			'parse_mode' => 'markdown'
		];
		if(!$lock) $data['reply_markup'] = new InlineKeyboard([
			['text' => '‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'callback_data' => 'cartIncrease'.$product['id']],
			['text' => '‚ûñ –£–±—Ä–∞—Ç—å', 'callback_data' => 'cartDecrease'.$product['id']],
			['text' => 'üîç –ü–µ—Ä–µ–π—Ç–∏', 'callback_data' => $product['id']]
		]);
		return $data;
	}
	
	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
	 * 
	 * @param int $sum –°—É–º–º–∞
	 * @param boolean $lock –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	 * @return array –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	 */
	public function formatCartSum($sum, $lock = false){
		$data = [
			'text' => '*–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: '.$sum.'‚ÇΩ*',
			'parse_mode' => 'markdown'
		];
		if(!$lock) $data['reply_markup'] = new InlineKeyboard([
			['text' => 'üìã –û—Ñ–æ—Ä–º–∏—Ç—å', 'callback_data' => 'orderCreate'] // üéÄ  üéâ
		]);
		return $data;
	}
	
	/**
	 * –í—ã–≤–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ë–î
	 * 
	 * @param array $values –ù–∞–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function displayPage($values){		
		$page = $this->fetchPage($values);
		$chat_id = $this->chat_id;
		$user_id = $this->user_id;
		
		if($page === false || $page['type'] == 'section') return Request::emptyResponse();				
        
		if($page['type'] == 'catalog'){
		    // –í—ã–≤–æ–¥ —Ä–∞–∑–¥–µ–ª–æ–≤/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–∞—Ä–∞–º–∏
			if(count($page['children']) < 2) return Request::emptyResponse();
			$pair = []; // –ú–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –ø–∞—Ä—ã —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
			foreach($page['children'] as $child){
				$pair[] = $child;
				if(count($pair) != 2) continue; // –ñ–¥–µ–º, –ø–æ–∫–∞ –≤ –º–∞—Å—Å–∏–≤–µ –±—É–¥–µ—Ç –¥–≤–∞ —Ä–∞–∑–¥–µ–ª–∞
				
				// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª—ã
				$keyboard = [];
				foreach([0,1] as $i){
					$button = ['text' => $pair[$i]['name']];
					if($pair[$i]['type'] == 'catalog') $button['callback_data'] = $pair[$i]['id'];
					else $button['switch_inline_query_current_chat'] = $pair[$i]['name'];
					$keyboard[] = $button;
				}
				
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–≤—É—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
				$data = [
					'chat_id'      => $chat_id,
					'photo' => $this->config['base_url'].'collage.php?f='.$pair[0]['thumb'].'&s='.$pair[1]['thumb'],
					'reply_markup' => new InlineKeyboard($keyboard),
					'disable_notification' => true,
				];				
				$response = Request::sendPhoto($data);
				
				$pair = [];
			}
			return $response;
		}
		elseif($page['type'] == 'cart'){
		    // –í—ã–≤–æ–¥ –∫–æ—Ä–∑–∏–Ω—ã
			$cart = $this->fetchCartContents();
			if(!count($cart)) return Request::sendMessage(['chat_id' => $chat_id, 'text' => '–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç! –°–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ üò≠']);
			
			$sum = 0;
			$oldSumDeleted = false;
			// –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
			foreach($cart as $product){
				if($product['sum_message_id'] && !$oldSumDeleted){
				    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
					Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $product['sum_message_id']]);
					$oldSumDeleted = true;
				}
				if($product['message_id']){
				    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
					Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $product['message_id']]);
				}				
				
				$data = $this->formatCartProduct($product);
				$data['chat_id'] = $chat_id;
				$sent = Request::sendMessage($data);
				
				if($sent->isOk()){		
				    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º –≤ –∫–æ—Ä–∑–∏–Ω–µ
					DB::getPdo()->query("update my_cart set message_id=".$sent->getResult()->getMessageId()." where user_id={$user_id} and my_page_id=".$product['id']);
				}
				$sum += $product['price'] * $product['quanity'];
			}
			
			// –í—ã–≤–æ–¥ —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
			$data = $this->formatCartSum($sum);
			$data['chat_id'] = $chat_id;
			
			$sentSum = Request::sendMessage($data);
			if($sentSum->isOk()){
			    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—É–º–º–æ–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–≤ –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞)
				DB::getPdo()->query("update my_cart set sum_message_id=".$sentSum->getResult()->getMessageId()." where user_id={$user_id}");
			}
			return $sentSum;
		}
		else{
		    // –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
			if(!count($page['messages'])) return Request::emptyResponse();
			foreach($page['messages'] as $i => $message){
				$data = ['chat_id' => $chat_id];
				switch($message['type']){	
				  case 'media_group':
					$contents = json_decode($message['contents'], true);
					$media = [];
					foreach($contents as $element) {
						if(!isset($element['type'])) $element['type'] = 'photo';
						$media[] = $element;
					}
					$data['media'] = $media;
					$method = 'sendMediaGroup';									  
					break;				
				  case 'photo':
					$data['photo'] = $message['contents'];
					$method = 'sendPhoto';
					break;
				  case 'video':
					$data['video'] = $message['contents'];
					$method = 'sendVideo';
					break;
				  case 'text':
					$data += [						
						'text'    => $message['contents'],
						'parse_mode' => 'Markdown',
						'disable_web_page_preview' => true,
					];
					$method = 'sendMessage';
					break;
				}
				
				if($page['type'] == 'product' && count($page['messages']) - $i == 1){
				    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞
					$section = $this->fetchParents($page['parent_id']);
					
					$kbRows = [
						[ ['text' => 'üõí –í –∫–æ—Ä–∑–∏–Ω—É', 'callback_data' => 'cartAdd'.$page['id']] ], []
					];
					
					if($section['parent']['parent_id']){
					    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
						$kbRows[0][] = ['text' => $section['name'], 'switch_inline_query_current_chat' => $section['name']]; // –ù–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª
						
						$kbRows[1][] = ['text' => $section['parent']['name'], 'callback_data' => $section['parent']['id']]; // –ù–∞ —Ä–∞–∑–¥–µ–ª
						$kbRows[1][] = ['text' => $section['parent']['parent']['name'], 'callback_data' => $section['parent']['parent']['id']]; // –ù–∞ –∫–æ—Ä–µ–Ω—å –∫–∞—Ç–∞–ª–æ–≥–∞
					}
					else{
					    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
						$kbRows[1][] = ['text' => $section['name'], 'switch_inline_query_current_chat' => $section['name']]; // –ù–∞ —Ä–∞–∑–¥–µ–ª
						$kbRows[1][] = ['text' => $section['parent']['name'], 'callback_data' => $section['parent']['id']];	// –ù–∞ –∫–æ—Ä–µ–Ω—å –∫–∞—Ç–∞–ª–æ–≥–∞				
					}
					
					if($this->isAdmin){
					    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–º
						$kbRows[2] = [];
						if($page['hidden']) $kbRows[2][] = ['text' => 'üîì –ü–æ–∫–∞–∑–∞—Ç—å', 'callback_data' => 'show'.$page['id']];
						else $kbRows[2][] = ['text' => 'üîí –°–∫—Ä—ã—Ç—å', 'callback_data' => 'hide'.$page['id']];
						$kbRows[2][] = ['text' => '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', 'callback_data' => 'edit'.$page['id']];						
					}					
					
					$data['reply_markup'] = new InlineKeyboard(...$kbRows);					
				}
				elseif(isset($message['reply_keyboard'])){
				    // –ï—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å —Å–≤–æ—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
					$keyboard = new Keyboard(...$message['reply_keyboard']);
					$keyboard->setResizeKeyboard(true); //->setOneTimeKeyboard(true)
					$data['reply_markup'] = $keyboard;
				};
				
				$response = Request::$method($data);				
			}
			return $response;
		}
	}
	
	/**
	 * –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ë–î
	 * 
	 * @param array $values –ù–∞–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	 * @return boolean|array
	 */
	public function fetchPage($values){
		$isAdmin = $this->isAdmin;
		
		$where = []; // –ù–∞–±–æ—Ä SQL —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
		foreach($values as $key => $val) $where[] = $key.'=:'.$key;
		if(!$isAdmin) $where[] = 'hidden=0';
		
		$pdo = DB::getPdo();
		$sth = $pdo->prepare("select * from my_page where ".implode(' and ', $where).' limit 1');
		
		foreach($values as $key => $val) $sth->bindValue(':'.$key, $val);
		if(!$sth->execute() || !$page = $sth->fetch(PDO::FETCH_ASSOC)) return false;
		
		if($page['type'] == 'catalog' || $page['type'] == 'section'){
		    // –î–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			$childrenWhere = ["parent_id={$page['id']}"];
			if(!$isAdmin) $childrenWhere[] = "hidden=0";
			$children = $pdo->query("select * from my_page where ".implode(' and ', $childrenWhere)." order by position asc")->fetchAll(PDO::FETCH_ASSOC);
			$page['children'] = $children;
		}
		else{
		    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
			$messages = $pdo->query("select * from my_message where my_page_id={$page['id']} order by position asc")->fetchAll(PDO::FETCH_ASSOC);		
			
			if($page['type'] != 'product'){
			    // –ò—â–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö (–∫—Ä–æ–º–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤)
				foreach($messages as $i => $message){
					$buttons = $pdo->query("select * from my_button where my_message_id={$message['id']} order by row asc, position asc")->fetchAll(PDO::FETCH_ASSOC);
					foreach($buttons as $button){
						$key = $button['type'].'_keyboard';
						if(!isset($messages[$i][$key][$button['row']])) $messages[$i][$key][$button['row']] = [];
						$messages[$i][$key][$button['row']][] = $button['text'];
					}
				}
			}
			
			$page['messages'] = $messages;
		}
		
		return $page;
	}
	
	/**
	 * –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î (–¥–ª—è Inline –∑–∞–ø—Ä–æ—Å–∞)
	 * 
	 * @param array $like –ù–∞–±–æ—Ä –Ω–µ—Å—Ç—Ä–æ–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
	 * @param array $strict –ù–∞–±–æ—Ä —Å—Ç—Ä–æ–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
	 * @return array
	 */
	public function searchPages($like = [], $strict = []){
		$isAdmin = $this->isAdmin;
		
		$where = []; // –ù–∞–±–æ—Ä SQL —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
		foreach($like as $key => $val) $where[] = "{$key} like :{$key}";
		foreach($strict as $key => $val) $where[] = "{$key}=:{$key}";
		if(!$isAdmin) $where[] = 'hidden=0';
		
		$pdo = DB::getPdo();
		$sth = $pdo->prepare("select * from my_page where ".implode(' and ', $where)." order by name asc");
		foreach($like as $key => $val) $sth->bindValue(':'.$key, "%{$val}%");
		foreach($strict as $key => $val) $sth->bindValue(':'.$key, $val);
		
		if(!$sth->execute()) return [];
		return $sth->fetchAll(PDO::FETCH_ASSOC);
	}
	
	/**
	 * –í—ã–±–æ—Ä–∫–∞ –∏–∑ –ë–î —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
	 * 
	 * @return array
	 */
	public function fetchCartContents(){
		$pdo = DB::getPdo();
		
		return $pdo->query("
			select * from my_cart left join my_page on my_cart.my_page_id=my_page.id 
			where my_cart.user_id={$this->user_id} and my_page.id is not null and my_page.hidden=0 and my_page.type='product'
			order by my_cart.id asc
		")->fetchAll(PDO::FETCH_ASSOC);
	}
	
	/**
	 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	 * 
	 * @param int $id ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	 * @return array –î–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è
	 */
	public function fetchParents($id){
		$pdo = DB::getPdo();
		
		$parent = $pdo->query("select * from my_page where id={$id} limit 1")->fetch(PDO::FETCH_ASSOC);
		if($parent['parent_id'] > 0) $parent['parent'] = $this->fetchParents($parent['parent_id']);
		return $parent;
	}
	
	/**
	 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ —Å–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	 * 
	 * @param int $id ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	 * @param int $hidden 0|1 
	 * @return number
	 */
	public function showHidePage($id, $hidden){
		$pdo = DB::getPdo();
		return $pdo->query("update my_page set hidden={$hidden} where id={$id} limit 1")->rowCount();
	}
	
	/**
	 * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	 * 
	 * @param int $id
	 * @return boolean|int
	 */
	public function deletePage($id){
		$pdo = DB::getPdo();
		$telegram = $this->command->getTelegram();
		
		if(!$page = $pdo->query("select * from my_page where id={$id} limit 1")->fetch(PDO::FETCH_ASSOC)) return false;
		
		if($page['thumb'] != ''){
		    // –£–¥–∞–ª—è–µ–º —ç—Å–∫–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
			$file = $telegram->getDownloadPath() . '/' . $page['thumb'];
			$count = $pdo->query("select count(*) from my_page where thumb='{$page['thumb']}' and id!={$page['id']}")->fetchColumn();			
			if($count == 0 && file_exists($file)) unlink($file);
		}
		
		$pdo->query("delete from my_message where my_page_id={$page['id']}");
		return $pdo->query("delete from my_page where id={$page['id']}")->rowCount();		
	}
	
	/**
	 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
	 * 
	 * @param int $page_id ID —Ç–æ–≤–∞—Ä–∞
	 * @return array –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
	 */
	public function cartAdd($page_id){
		$chat_id = $this->chat_id;
		$user_id = $this->user_id;
		$pdo = DB::getPdo();
		
		$pdo->query("insert into my_cart (user_id, my_page_id, quanity) values ({$user_id}, {$page_id}, 1) on duplicate key update quanity = quanity+1");
		
		$cart = $this->fetchCartContents($user_id);

		if(count($cart)){
			$text = "–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n\n";
			$sum = 0;
			$oldSumDeleted = false;
			foreach($cart as $product){				
				$text .= "{$product['quanity']}x {$product['name']}, {$product['price']}‚ÇΩ\n";
				$sum += $product['price'] * $product['quanity'];				
				
				if(!$oldSumDeleted && $product['sum_message_id']){
					Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $product['sum_message_id']]);
					$oldSumDeleted = true;
				}
				if($product['message_id']) Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $product['message_id']]);
			}
			$pdo->query("update my_cart set message_id=0, sum_message_id=0 where user_id={$user_id}");
			$text .= "\n–°—É–º–º–∞: {$sum}‚ÇΩ";
		}
		else{
			$text = "–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –ø—É—Å—Ç–æ!\n\n–¢–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏";
		}
		
		return ['text' => $text, 'show_alert' => true];
	}
	
	/**
	 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
	 * 
	 * @param int $page_id ID —Ç–æ–≤–∞—Ä–∞
	 * @param string $action "increase"|"decrease" –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
	 * @return array –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
	 */
	public function cartUpdate($page_id, $action){
		$pdo = DB::getPdo();		
		$user_id = $this->user_id;
		$chat_id = $this->chat_id;
		$cart = $this->fetchCartContents($user_id);
		
		$sum = 0;
		$sum_message_id = 0;
		foreach($cart as $product){			
			if($product['id'] != $page_id) {
				$sum += $product['price'] * $product['quanity'];
				if(in_array($action, ['increase', 'decrease'])) continue;
			}
			
			if(!$sum_message_id && $product['sum_message_id']) $sum_message_id = $product['sum_message_id'];
			if($action == 'increase') $product['quanity']++;
			elseif($action == 'decrease') $product['quanity']--;
			
			if($product['quanity'] == 0){
				$pdo->query("delete from my_cart where user_id={$user_id} and my_page_id={$product['id']}");
				if($product['message_id']) Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $product['message_id']]);
			}
			else{
				if(in_array($action, ['increase', 'decrease'])){
					$sum += $product['price'] * $product['quanity'];
					$pdo->query("update my_cart set quanity={$product['quanity']} where user_id={$user_id} and my_page_id={$product['id']}");	
				}
				$data = $this->formatCartProduct($product, $action == 'lock');
				$data['chat_id'] = $chat_id;
				$data['message_id'] = $product['message_id'];				
				
				if($product['message_id']) Request::editMessageText($data);
			}
		}
		
		if($sum_message_id){
			if($sum == 0){
				Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $sum_message_id]);
				$this->displayPage(['type' => 'cart']);
			}
			else{
				$data = $this->formatCartSum($sum, $action == 'lock');
				$data['chat_id'] = $chat_id;
				$data['message_id'] = $sum_message_id;
				
				Request::editMessageText($data);
			}
		}		
		
		return ['text' => '–ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'alert' => false];		
	}
	
	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
	 * 
	 * @param \Longman\TelegramBot\Conversation $conv
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function orderCreateConv($conv){
		$commandName = $this->command->getName();
		$chat_id = $this->chat_id;
		$user_id = $this->user_id;
		
		$pdo = DB::getPdo();	
		
		if($commandName == 'callbackquery'){
		    // –ù–∞–∂–∞—Ç–∞ inline –∫–Ω–æ–ø–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º callback_data
			$callback_query = $this->command->getCallbackQuery();
			$callback_data = $callback_query->getData();
			$callback_query_id = $callback_query->getId();
			$data = ['callback_query_id' => $callback_query_id];
			
			if($callback_data == 'orderCreate' && !isset($conv->notes['stage'])){
			    // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
				Request::sendMessage(['chat_id' => $chat_id, 'text' => '–ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–±—Ä–∞–≤ /cancel']);
				
				if($contact = $pdo->query("select * from my_contact where user_id={$user_id}")->fetch(PDO::FETCH_ASSOC)){
					$this->sendConvStage($conv, 'contact_confirm', ['first_name' => $contact['first_name']]);					
				}
				else{
					$this->sendConvStage($conv, 'request_contact', ['first_name' => $callback_query->getFrom()->getFirstName()]);
				}
				$conv->update();
			}
			else{
			    // –ù–∞–∂–∞—Ç–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –∫–Ω–æ–ø–∫–∞
				$data += [
					'text' => '–í–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –Ω–∞–±–µ—Ä–∏—Ç–µ /cancel',
					'show_alert' => true
				];
			}
			return Request::answerCallbackQuery($data);			
		}

		$message = $this->command->getMessage();			
		$message_type = $message->getType();
		
		if($message_type == 'command'){
		    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /cancel
			switch($message->getCommand()){
				case 'cancel':
					$conv->cancel();				
					return Request::sendMessage(['chat_id' => $chat_id, 'text' => '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ :(', 'reply_markup' => $this->getDefaultKeyboard()]);
			}
		}
		
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
		switch($conv->notes['stage']){
			case 'contact_confirm':	// –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞
				$my_contact = $pdo->query("select * from my_contact where user_id={$user_id}")->fetch(PDO::FETCH_ASSOC);
				if($message_type == 'text' && $message->getText() == '–Ø - –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞'){
				    // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
					$conv->notes['contact'] = $my_contact;
				}
				elseif($message_type == 'contact'){
					$contact = $message->getContact();
					$conv->notes['contact'] = [
						'phone_number' => $this->escapeMarkdown($contact->getPhoneNumber()),
						'first_name' => $this->escapeMarkdown($contact->getFirstName()),
						'last_name' => $this->escapeMarkdown($contact->getLastName()),
						'user_id' => $contact->getUserId(),
						'address' => $my_contact['address'], // –ë–µ—Ä–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞
					];
				}
				else break;
			
				if($conv->notes['contact']['address'] == ''){						 
					$response = $this->sendConvStage($conv, 'address');
				}		
				else{					
					$response = $this->sendConvStage($conv, 'address_confirm');
				}				
				break;
			case 'request_contact': // –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
				if($message_type != 'contact') break;
				$contact = $message->getContact();
				if($contact->getUserId() != $user_id){
					$response = Request::sendMessage(['chat_id' => $chat_id, 'text' => $contact->getFirstName().' —ç—Ç–æ –Ω–µ –≤—ã!']);
				}
				else{
				    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ë–î
					$sth = $pdo->prepare("insert into my_contact (phone_number, first_name, last_name, user_id) values (:phone_number, :first_name, :last_name, :user_id)");
					if($sth->execute([
						':phone_number' => $this->escapeMarkdown($contact->getPhoneNumber()),
						':first_name' => $this->escapeMarkdown($contact->getFirstName()),
						':last_name' => $this->escapeMarkdown($contact->getLastName()),
						':user_id' => $user_id
					])){						
						$response = $this->sendConvStage($conv, 'contact_confirm');
					}
					else{
						$response = Request::sendMessage(['chat_id' => $chat_id, 'text' => '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –µ—â–µ —Ä–∞–∑!']);						
					}
				}				
				break;
			case 'address': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
				if($message_type != 'text') break;
				$address = $this->escapeMarkdown($message->getText());				
				$sth = $pdo->prepare("update my_contact set address=:address where user_id={$user_id}");
				if($sth->execute([':address' => $address])){
					$response = $this->sendConvStage($conv, 'time');
					$conv->notes['contact']['address'] = $address;
				}
				else{
					$response = Request::sendMessage(['chat_id' => $chat_id, 'text' => '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –µ—â–µ —Ä–∞–∑!']);
				}
				break;
			case 'address_confirm': // –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–∂–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
				if($message_type != 'text') break;				
				if(in_array($message->getText(), ['–î–∞', '–¥–∞'])){
					$response = $this->sendConvStage($conv, 'time');
				}
				else{
					$response = $this->sendConvStage($conv, 'address');
				}				
				break;
			case 'time': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
				if($message_type != 'text') break;

				$conv->notes['time'] = $this->escapeMarkdown($message->getText());
				$response = $this->sendConvStage($conv, 'fop');			
				break;
			case 'fop': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
				if($message_type != 'text') break;
				
				$conv->notes['fop'] = $this->escapeMarkdown($message->getText());
				$response = $this->sendConvStage($conv, 'special');
				break;
			case 'special': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Å–æ–±—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π
				if($message_type != 'text') break;
				
				$conv->notes['special'] = $this->escapeMarkdown($message->getText());
				$response = $this->sendConvStage($conv, 'summary');				
				break;
			case 'summary': // –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
				if($message_type != 'text') break;
				switch($message->getText()){
					case '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑':
						return $this->orderCreateFinish($conv);
						break;
					case '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è':
						$response = $this->sendConvStage($conv, 'contact_confirm');
						$conv->notes['stage_rewrite'] = 'summary';
						break;
					case '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏':
						$response = $this->sendConvStage($conv, 'address');
						$conv->notes['stage_rewrite'] = 'summary';
						break;
					case '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏':
						$response = $this->sendConvStage($conv, 'time');
						$conv->notes['stage_rewrite'] = 'summary';					
						break;
					case '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã':
						$response = $this->sendConvStage($conv, 'fop');
						$conv->notes['stage_rewrite'] = 'summary';					
						break;
					case '–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è':
						$response = $this->sendConvStage($conv, 'special');
						$conv->notes['stage_rewrite'] = 'summary';					
						break;
					case '–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ':						
						$conv->cancel();						
						return Request::sendMessage(['chat_id' => $chat_id, 'text' => '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ :(', 'reply_markup' => $this->getDefaultKeyboard()]);
				}				
				break;
		}
		$conv->update();
		return isset($response) ? $response : Request::emptyResponse();
	}
	
	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
	 *
	 * @param \Longman\TelegramBot\Conversation $conv
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function editConv($conv){
	    $update_type = $this->command->getUpdate()->getUpdateType();		
		$chat_id = $this->chat_id;
	    $user_id = $this->user_id;
		$pdo = DB::getPdo();
		
	    if($update_type == 'callback_query'){
	        // –ù–∞–∂–∞—Ç–∞ inline –∫–Ω–æ–ø–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º callback_data
	        $callback_query = $this->command->getCallbackQuery();
	        $callback_query_id = $callback_query->getId();
			$callback_data     = $callback_query->getData();
			$answer = ['callback_query_id' => $callback_query_id];
			
			if($callback_data == 'del_media'){
			    // –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
				$message_id = $callback_query->getMessage()->getMessageId();
				$i = array_search($message_id, $conv->notes['media']);
				if($i !== false && $my_message = $pdo->query("select * from my_message where my_page_id=".$conv->notes['id']." and type='media_group' limit 1")->fetch(PDO::FETCH_ASSOC)){
					$media = json_decode($my_message['contents'], true);
					if(isset($media[$i])){
						unset($media[$i]);
						$sth = $pdo->prepare("update my_message set contents=:contents where id=".$my_message['id']);
						$sth->execute([':contents' => json_encode($media)]);
						Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $conv->notes['media'][$i]]);
						return Request::answerCallbackQuery($answer + ['text' => '–£–¥–∞–ª–µ–Ω–æ', 'show_alert' => false]);
					}
				}
				return Request::answerCallbackQuery($answer);
			}
			
			// –ù–∞–∂–∞—Ç–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –∫–Ω–æ–ø–∫–∞
	        return Request::answerCallbackQuery($answer + [
	            'text' => '–í–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã',
	            'show_alert' => false	            
	        ]);	        
	    }
		if($update_type == 'edited_message'){
			$message = $this->command->getEditedMessage();
		}
	    else{
			$message = $this->command->getMessage();
		}
	    $message_type = $message->getType();
	    
		// –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î
	    $page = $pdo->query("select * from my_page where id=".$conv->notes['id']." and type='product'")->fetch(PDO::FETCH_ASSOC);
	    if(!$page){
	        $conv->cancel();
	        return Request::sendMessage([
	            'chat_id' => $chat_id,
	            'text' => '–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä',
	            'reply_markup' => $this->getDefaultKeyboard()
	        ]);
	    }
	    
	    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥, –¥–æ—Å—Ç—É–ø–Ω–æ–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö –¥–∏–∞–ª–æ–≥–∞
	    if($message_type == 'text' && $message->getText() == '–ù–∞–∑–∞–¥'){			
			$result = $this->sendConvStage($conv, 'edit_start');
			$conv->update();
			return $result;
		}
		
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
	    switch($conv->notes['stage']){
	        case 'edit_start': // –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥—Ä—É–≥–æ–π —Å—Ç–∞–¥–∏–∏
	            if(!in_array($message_type, ['text', 'photo', 'video'])) return Request::emptyResponse();
	            
	            if(in_array($message_type, ['photo', 'video'])){
	                // –§–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Ç–æ–≤–∞—Ä—É
					if($message_type == 'photo') {
						$doc = end($message->getPhoto());
						$mention = '–§–æ—Ç–æ';
					}
					else {
						$doc = $message->getVideo();
						$mention = '–í–∏–¥–µ–æ';
					}
					
					$file_id = $doc->getFileId();
					
					$msg = $pdo->query("select * from my_message where my_page_id={$page['id']} and type!='text' order by position asc limit 1")->fetch(PDO::FETCH_ASSOC);
					if($msg['type'] == 'media_group'){
						$msg['contents'] = json_decode($msg['contents'], true);						
					}
					else{
						$msg['contents'] = [ ['type' => $msg['type'], 'media' => $msg['contents']] ];
						$msg['type'] = 'media_group';
					}
					
					$msg['contents'][ $message->getMessageId() ] = ['type' => $message_type, 'media' => $file_id];
					$msg['contents'] = json_encode($msg['contents']);
					
					$sth = $pdo->prepare("update my_message set type=:type, contents=:contents where id=".$msg['id']);
					$sth->execute([':type' => $msg['type'], ':contents' => $msg['contents']]);
					
					if($update_type == 'edited_message') return Request::emptyResponse();
	                return Request::sendMessage(['chat_id' => $chat_id, 'text' => $mention.' –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Ç–æ–≤–∞—Ä—É']);
	            }
	            
	            // –ü–µ—Ä–µ—Ö–æ–¥—ã –∫ –¥—Ä—É–≥–∏–º —Å—Ç–∞–¥–∏—è–º –¥–∏–∞–ª–æ–≥–∞
	            switch($message->getText()){
	                case '–í—ã—Ö–æ–¥':
	                    $conv->stop();
	                    Request::sendMessage([
	                        'chat_id' => $chat_id,
	                        'text' => '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
	                        'reply_markup' => $this->getDefaultKeyboard()
	                    ]);
	                    // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
						return $this->displayPage(['id' => $page['id']]);
	                    break;
	                case '–ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ':
	                    $response = $this->sendConvStage($conv, 'edit_position', $page);
	                    break;
	                case '–¶–µ–Ω–∞':
	                    $response = $this->sendConvStage($conv, 'edit_price', $page);
	                    break;
	                case '–¢–µ–∫—Å—Ç':
	                    $my_message = $pdo->query("select * from my_message where my_page_id=".$conv->notes['id']." and type='text'")->fetch(PDO::FETCH_ASSOC);
	                    if(!$my_message){
							$text = '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'; // Todo: fix
						}
	                    Request::sendMessage(['chat_id' => $chat_id, 'text' => $my_message['contents'], 'parse_mode' => 'markdown']);
	                    
	                    $response = $this->sendConvStage($conv, 'edit_message');
	                    break;
	                case '–ù–∞–∑–≤–∞–Ω–∏–µ':
	                    $response = $this->sendConvStage($conv, 'edit_name', $page);
	                    break;
	                case '–≠—Å–∫–∏–∑':
	                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Å–∫–∏–∑
						$download_url = $this->config['base_url'].$this->config['download_path'];
	                    Request::sendPhoto(['chat_id' => $chat_id, 'photo' => $download_url.$page['thumb']]);
	                    $response = $this->sendConvStage($conv, 'edit_thumb');
	                    break;
	                case '–û–ø–∏—Å–∞–Ω–∏–µ':
	                    $response = $this->sendConvStage($conv, 'edit_descr', $page);
	                    break;
					case '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
					    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∫–Ω–æ–ø–∫–æ–π –£–¥–∞–ª–∏—Ç—å
						$my_message = $pdo->query("select * from my_message where my_page_id=".$page['id']." and type!='text' limit 1")->fetch(PDO::FETCH_ASSOC);
						if(!$my_message){
							return Request::sendMessage(['chat_id' => $chat_id, 'text' => '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç']);
						}
						
						if($my_message['type'] != 'media_group'){
							$media = [ ['type' => $my_message_type, 'media' => $my_message['contents']] ];
							$sth = $pdo->prepare("update my_message set type='media_group', contents=:contents where id=".$my_message['id']);
							$sth->execute([':contents' => json_encode($media)]);
						}
						else{
							$media = json_decode($my_message['contents'], true);
						}
						
						if(!count($media)) return Request::sendMessage(['chat_id' => $chat_id, 'text' => '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç']);
						
						$conv->notes['media'] = [];
						foreach($media as $i => $item){
							$data = ['chat_id' => $chat_id, 'reply_markup' => new InlineKeyboard([
								['text' => '–£–¥–∞–ª–∏—Ç—å', 'callback_data' => 'del_media']
							])];
							if(!isset($item['type']) || $item['type'] == 'photo'){
								$data['photo'] = $item['media'];
								$method = 'sendPhoto';
							}	
							else{
								$data['video'] = $item['media'];
								$method = 'sendVideo';
							}
							$sent = Request::$method($data);
							$conv->notes['media'][$i] = $sent->getResult()->getMessageId();
						}
						$response = $this->sendConvStage($conv, 'edit_media');
						break;
	                case '‚ùå –£–¥–∞–ª–∏—Ç—å':
	                    $response = $this->sendConvStage($conv, 'edit_confirm_del');
	                    break;
	            }
	            
	            
	            break;
	        case 'edit_position': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –º–µ—Å—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
	            if($message_type != 'text') return Request::emptyResponse();
	            $message_text = $message->getText();
				
				if($message_text == '–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º') $pos = 0;
				elseif($message_text == '–°–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º') $pos = 99;
				else{
					if(!preg_match("/^[0-9]+$/u", $message_text)) return Request::emptyResponse();
					$pos = $message_text;
				}
				
				$pdo->query("update my_page set position={$pos} where id=".$page['id']);
				// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ
				$pdo->query("SET @pos = 0;");
				$order_mod = ($page['position'] < $pos) ? 'asc' : 'desc';
				$pdo->query("update my_page set position = @pos:= @pos + 1 where parent_id={$page['parent_id']} order by position asc, (id={$page['id']}) {$order_mod}");
				
				$position = $pdo->query("select position from my_page where id=".$page['id'])->fetchColumn();
				Request::sendMessage(['chat_id' => $chat_id, 'text' => '–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: '.$position]);
				$response = $this->sendConvStage($conv, 'edit_start');
				break;
	        case 'edit_message': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
	            if($message_type != 'text') return Request::emptyResponse();
	            $message_text = $message->getText();			
				
				$sth = $pdo->prepare("update my_message set contents=:contents where my_page_id={$page['id']} and type='text' limit 1");
				$sth->execute([':contents' => $message_text]);
				
				if($update_type == 'edited_message') return Request::emptyResponse();
				return Request::sendMessage(['chat_id' => $chat_id, 'text' => '–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω']);
				break;
	        case 'edit_name': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
	            if($message_type != 'text') return Request::emptyResponse();
	            $message_text = $message->getText();
				
				$sth = $pdo->prepare("update my_page set name=:name where id=".$page['id']);
				$sth->execute([':name' => $message_text]);
				$page['name'] = $message_text;
				$response = $this->sendConvStage($conv, 'edit_start', $page);
				break;	
	        case 'edit_thumb': // –û–∂–∏–¥–∞–µ—Ç—Å—è —ç—Å–∫–∏–∑
				if($message_type != 'photo') return Request::emptyResponse();
			
				$doc = end($message->getPhoto());
				$file_id = $doc->getFileId();
				$file    = Request::getFile(['file_id' => $file_id]);
				if (!$file->isOk() || !Request::downloadFile($file->getResult())) return Request::sendMessage(['chat_id' => $chat_id, 'text' => '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ']);
								    
				$thumb_folder = $this->command->getTelegram()->getDownloadPath();
				$source_name = $file->getResult()->getFilePath();
				$thumb = self::createThumb($thumb_folder, $source_name);
				
				$sth = $pdo->prepare("update my_page set thumb=:thumb where id=".$page['id']);
				$sth->execute([':thumb' => $thumb]);				

				// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç—Å–∫–∏–∑, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
				$old_thumb = $thumb_folder.'/'.$page['thumb'];
				$count = $pdo->query("select count(*) from my_page where thumb='{$page['thumb']}'")->fetchColumn();
				if($count == 0 && file_exists($old_thumb)) unlink($old_thumb);
				
				// –í—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–π —ç—Å–∫–∏–∑ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
				$download_url = $this->config['base_url'].$this->config['download_path'];
				Request::sendPhoto([
					'chat_id' => $chat_id,
					'photo' => $download_url.$thumb,
					'caption' => '–≠—Å–∫–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω'
				]);
				
				$response = $this->sendConvStage($conv, 'edit_start');
				break;
	        case 'edit_descr': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
	            if($message_type != 'text') return Request::emptyResponse();
	            $message_text = $message->getText();
	            
				$sth = $pdo->prepare("update my_page set descr=:descr where id=".$page['id']);
				$sth->execute([':descr' => $message_text]);
				$page['descr'] = $message_text;
				$response = $this->sendConvStage($conv, 'edit_start', $page);	            
	            break;
	        case 'edit_confirm_del': // –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	            if($message_type == 'text' && $message->getText() == '‚ùóÔ∏è –î–∞'){
	                $this->deletePage($conv->notes['id']);
	                $conv->stop();
	                return Request::sendMessage([
	                    'chat_id' => $chat_id,
	                    'text' => '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞',
	                    'reply_markup' => $this->getDefaultKeyboard()
	                ]);
	            }	            
	            break;
	        case 'edit_price': // –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
	            if($message_type != 'text' || !preg_match("/^[0-9]+$/u", $price = $message->getText())) return Request::emptyResponse();
	            $pdo->query("update my_page set price={$price} where id=".$page['id']);
				$page['price'] = $price;
	            $response = $this->sendConvStage($conv, 'edit_start', $page);
	            break;
			case 'edit_media': // –û–∂–∏–¥–∞–µ—Ç—Å—è –ù–∞–∑–∞–¥ –¥–ª—è –≤—ã—Ö–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
				if($message_type == 'text' && $message->getText() == '–ùa–∑–∞–¥'){
					foreach($conv->notes['media'] as $message_id) Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $message_id]);
					$response = $this->sendConvStage($conv, 'edit_start');
				}
				break;
	    }

	    $conv->update();
	    return isset($response) ? $response : Request::emptyResponse();
	}
	
	/**
	 * –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞
	 * 
	 * @param \Longman\TelegramBot\Conversation $conv
	 * @param string $stage –ú–µ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
	 * @param array $args –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function sendConvStage($conv, $stage, $args = []){
		$chat_id = $this->chat_id;
		$user_id = $this->user_id;
		$reply_markup = Keyboard::remove();
		$resize_keyboard = true;
		
		if(isset($conv->notes['stage_rewrite'])){
			$stage = $conv->notes['stage_rewrite'];
			unset($conv->notes['stage_rewrite']);
		}
		
		switch($stage){
		    // –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
			case 'address':
				$text = '–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑? –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–æ–¥—ä–µ–∑–¥ –∏ —ç—Ç–∞–∂';				
				break;
			case 'address_confirm':
				$text = "–î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É?\n\n".$conv->notes['contact']['address'];
				$reply_markup = new Keyboard(['–î–∞', '–ù–µ—Ç']);	
				break;
			case 'request_contact':
				$text = '–ü—Ä–∏–≤–µ—Ç, '.$args['first_name'].'! –ú—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç';
				$reply_markup = new Keyboard([
					['text' => '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', 'request_contact' => true]
				]);
				break;
			case 'contact_confirm':
				$text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã";
				if(isset($args['first_name'])) $text = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, '.$args['first_name']."!\n\n".$text;
				$reply_markup = new Keyboard(['–Ø - –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞']);
				break;
			case 'time':
				$text = '–í –∫–∞–∫–æ–π –¥–µ–Ω—å –∏ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?';
				break;
			case 'fop':
				$reply_markup = new Keyboard(['–ù–∞–ª–∏—á–Ω—ã–º–∏', '–°–±–µ—Ä–±–∞–Ω–∫ –æ–Ω–ª–∞–π–Ω']);
				$text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã';				
				break;
			case 'special':
				$reply_markup = new Keyboard(['–ù–µ—Ç –æ—Å–æ–±—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π']);
				$text = '–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É (–µ—Å–ª–∏ –µ—Å—Ç—å)';
				break;
			case 'summary':
				//$contact = DB::getPdo()->query("select * from my_contact where user_id={$user_id}")->fetch(PDO::FETCH_ASSOC);
				$text = $this->formatOrderSummary($conv);
				
				$reply_markup = new Keyboard(
					['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'], 
					['–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è'], ['–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'], ['–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'], ['–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã'], ['–ò–∑–º–µ–Ω–∏—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è'], 
					['–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ']
				);
				$resize_keyboard = false;		
				break;
				
			// –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è	
			case 'edit_start':
				if(isset($args['name'], $args['price'], $args['descr'])) Request::sendMessage([
					'chat_id' => $chat_id,
					'text' => "*{$args['name']}, {$args['price']}‚ÇΩ*\n\n".$args['descr'],
					'parse_mode' => 'markdown'
				]);			
			    $text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –∫ —Ç–æ–≤–∞—Ä—É, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.';
			    $reply_markup = $this->getEditKeyboard();
			    $resize_keyboard = false;
			    break;
			case 'edit_position':
			    $text = '–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: '.$args['position']."\n\n–ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ (—Ü–∏—Ñ—Ä–æ–π)";
			    $reply_markup = new Keyboard(['–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º'], ['–°–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º'], ['–ù–∞–∑–∞–¥']);
			    break;
			case 'edit_price':
			    $text = "–ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ü–∏—Ñ—Ä–æ–π)";
			    $reply_markup = new Keyboard(['–ù–∞–∑–∞–¥']);
			    break;
			case 'edit_message':
			    $text = '–≠—Ç–æ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ';
			    $reply_markup = new Keyboard(['–ù–∞–∑–∞–¥']);
			    break;
			case 'edit_name':
			    $text = '*'.$args['name']."*\n\n–ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –≤–µ—Å)";
			    $reply_markup = new Keyboard(['–ù–∞–∑–∞–¥']);
			    break;
			case 'edit_thumb':
			    $text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —ç—Å–∫–∏–∑–∞ (—Ñ–æ—Ç–æ –±—É–¥–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ 156x156)';
			    $reply_markup = new Keyboard(['–ù–∞–∑–∞–¥']);
			    break;
			case 'edit_descr':
			    $text = "–ù–∞–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ";
			    $reply_markup = new Keyboard(['–ù–∞–∑–∞–¥']);				
			    break;
			case 'edit_media':
				$text = "–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è";
				$reply_markup = new Keyboard(['–ùa–∑–∞–¥']);
				break;				
			case 'edit_confirm_del':
			    $text = '–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å';
			    $reply_markup = new Keyboard(['‚ùóÔ∏è –î–∞'], ['–ù–∞–∑–∞–¥']);
			    break;
		}
		
		$conv->notes['stage'] = $stage;
		
		if($reply_markup instanceof Keyboard && $resize_keyboard) $reply_markup->setResizeKeyboard(true);
		return Request::sendMessage([
			'chat_id' => $chat_id, 
			'text' => $text,
			'parse_mode' => 'markdown',
			'reply_markup' => $reply_markup
		]);
	}
	
	/**
	 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
	 * 
	 * @param \Longman\TelegramBot\Conversation $conv
	 * @param boolean $toAdmin –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	 * @return string –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	 */
	public function formatOrderSummary($conv, $toAdmin = false){
		$chat_id = $this->chat_id;
		$user_id = $this->user_id;
		$cart = $this->fetchCartContents($user_id);
		$sum = 0;
		
		$oldSumDeleted = false;		
		$text = ($toAdmin) ? '' : "–í–∞—à –∑–∞–∫–∞–∑: \n\n";
		foreach($cart as $product){
			$text .= "{$product['quanity']}x {$product['name']}, {$product['price']}‚ÇΩ\n";
			$sum += $product['price'] * $product['quanity'];					
			
			if($toAdmin){
				if(!$oldSumDeleted && $product['sum_message_id']){
					$oldSumDeleted = true;
					Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $product['sum_message_id']]);
				}
				if($product['message_id']) Request::deleteMessage(['chat_id' => $chat_id, 'message_id' => $product['message_id']]);				
			}
		}
		
		$text .= "*–°—É–º–º–∞: {$sum}‚ÇΩ*\n\n";
		if($toAdmin){
			$contact = DB::getPdo()->query("select * from my_contact where user_id={$user_id}")->fetch(PDO::FETCH_ASSOC);
			$text .= "*–ó–∞–∫–∞–∑—á–∏–∫*: ".trim($contact['first_name'].' '.$contact['last_name']).", ".$contact['phone_number']."\n";
		}
		$text .= "*–ü–æ–ª—É—á–∞—Ç–µ–ª—å*: ".trim($conv->notes['contact']['first_name'].' '.$conv->notes['contact']['last_name']).", ".$conv->notes['contact']['phone_number']."\n";
		$text .= "*–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*: {$conv->notes['contact']['address']}\n";
		$text .= "*–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏*: {$conv->notes['time']}\n";
		$text .= "*–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã*: {$conv->notes['fop']}\n";
		$text .= "*–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è*: {$conv->notes['special']}";

		return $text;
	}	
	
	/**
	 * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
	 * 
	 * @param \Longman\TelegramBot\Conversation $conv
	 * @return \Longman\TelegramBot\Entities\ServerResponse
	 */
	public function orderCreateFinish($conv){
		$pdo = DB::getPdo();
		$chat_id = $this->chat_id;
		$user_id = $this->user_id;
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
		$contact = $pdo->query("select * from my_contact where user_id={$user_id}")->fetch(PDO::FETCH_ASSOC);
		$text = $contact['first_name'].', –º—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç—ã –¥–æ–≤–µ—Ä—è–µ—à—å –Ω–∞–º —Å–≤–æ–∏ —Å—ã—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã!) –ö—É—Ä—å–µ—Ä –ø—Ä–∏–≤–µ–∑–µ—Ç –∑–∞–∫–∞–∑, –∞ –µ—Å–ª–∏ –∑–∞–±–ª—É–¥–∏—Ç—Å—è - –ø–æ–∑–≤–æ–Ω–∏—Ç –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.'."\n\n";
		$text .= '–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –∑–≤–æ–Ω–∏ –Ω–∞–º: +79220001131';		
		Request::sendMessage(['chat_id' => $chat_id, 'text' => $text, 'reply_markup' => $this->getDefaultKeyboard()]);
		
		$text = $this->formatOrderSummary($conv, true);
		// –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
		$pdo->query("delete from my_cart where user_id={$user_id}");						
		$conv->stop();
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
		return Request::sendMessage(['chat_id' => $this->config['admin_group'], 'text' => $text, 'parse_mode' => 'markdown']);
	}

	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	 * 
	 * @return \Longman\TelegramBot\Entities\Keyboard
	 */
	public function getDefaultKeyboard(){
		$pdo = DB::getPdo();
		$isAdmin = $this->isAdmin;
		
		$rows = [];
		// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		$buttons = $pdo->query("
            select my_button.* from my_button 
            left join my_message on my_button.my_message_id = my_message.id
            left join my_page on my_message.my_page_id = my_page.id
            where my_message.type='text' and my_page.type='start' order by row asc, position asc
        ")->fetchAll();
		foreach($buttons as $button){
			$rows[ $button['row'] ][ $button['position'] ] = $button['text'];
		}
		
		$keyboard = new Keyboard(...$rows);
		$keyboard->setResizeKeyboard(true);
		return $keyboard;
	}
	
	/**
	 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
	 * 
	 * @return \Longman\TelegramBot\Entities\Keyboard
	 */
	public function getEditKeyboard(){
	    $keyboard = new Keyboard(
	        ['–ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ', '–¶–µ–Ω–∞'],	        
	        ['–¢–µ–∫—Å—Ç', '–ù–∞–∑–≤–∞–Ω–∏–µ'],        
	        ['–≠—Å–∫–∏–∑', '–û–ø–∏—Å–∞–Ω–∏–µ'],
	        ['–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ', '‚ùå –£–¥–∞–ª–∏—Ç—å'],
			['–í—ã—Ö–æ–¥']
	    );
	    return $keyboard->setResizeKeyboard(true);	    
	}
	
	/**
	 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
	 * 
	 * @param string $str
	 * @return string
	 */
	public function escapeMarkdown($str){
		return str_replace([
			'*', '_', '[', ']', '`' 
		], [
			'\*', '\_', '\[', '\]', '\`'
		], (string)$str);
	}
	
	/**
	 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —ç—Å–∫–∏–∑–∞ 156x156
	 * 
	 * @param string $source_name –ò–º—è —Ñ–∞–π–ª–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
	 * @param string $thumb_folder –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
	 * @return string –ò–º—è —Ñ–∞–π–ª–∞ —ç—Å–∫–∏–∑–∞
	 */
	public static function createThumb($download_folder, $source_name){
	    $path = $download_folder . '/' . $source_name;
		$img = imagecreatefromjpeg($path);
		$width = imagesx($img);
		$height = imagesy($img);
		$side = 156;		

		if($width > $height){
			$newx = ($width-$height)/2;
			$width = $height;
			$cropped = imagecrop($img, ['x' => $newx, 'y' => 0, 'width' => $width, 'height' => $height]);			
		}
		elseif($height > $width){
			$newy = ($height-$width)/2;
			$height = $width;
			$cropped = imagecrop($img, ['x' => 0, 'y' => $newy, 'width' => $width, 'height' => $height]);			
		}
		else{
			$cropped = $img;
		}
		
		$result = imagecreatetruecolor($side, $side);
		imagecopyresampled($result, $cropped, 0, 0, 0, 0, $side, $side, $width, $height);		
		
		ob_start();
		imagejpeg($result, null, 90);
		$thumb_contents = ob_get_contents();
		ob_end_clean();
		imagedestroy($result);
		
		$thumb_name = md5($thumb_contents);
		file_put_contents($download_folder.'/'.$thumb_name, $thumb_contents);
		unlink($path);
		
		return $thumb_name;
	}
	
}
